// file: thuatoan.js

/**
 * L·ªõp MasterPredictor: M·ªôt thu·∫≠t to√°n d·ª± ƒëo√°n n√¢ng cao.
 * N√≥ k·∫øt h·ª£p nhi·ªÅu ph∆∞∆°ng ph√°p kh√°c nhau ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n.
 */
class MasterPredictor {
    constructor() {
        this.history = []; // L∆∞u tr·ªØ l·ªãch s·ª≠ k·∫øt qu·∫£: ['T√†i', 'X·ªâu', 'T√†i', ...]
        this.maxHistorySize = 500;
    }

    /**
     * C·∫≠p nh·∫≠t d·ªØ li·ªáu l·ªãch s·ª≠ m·ªói khi c√≥ k·∫øt qu·∫£ m·ªõi.
     * @param {Object} data - D·ªØ li·ªáu m·ªõi, bao g·ªìm { result: 'T√†i'/'X·ªâu', score: s·ªë_t·ªïng }
     */
    async updateData(data) {
        if (!data || !data.result) {
            console.warn("D·ªØ li·ªáu c·∫≠p nh·∫≠t kh√¥ng h·ª£p l·ªá.");
            return;
        }

        // Th√™m k·∫øt qu·∫£ m·ªõi v√†o l·ªãch s·ª≠
        this.history.push(data.result);
        
        // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc l·ªãch s·ª≠ ƒë·ªÉ tr√°nh t·ªën b·ªô nh·ªõ
        if (this.history.length > this.maxHistorySize) {
            this.history.shift(); // X√≥a ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
        }
        console.log(`[üîÆ] Thu·∫≠t to√°n c·∫≠p nh·∫≠t l·ªãch s·ª≠. T·ªïng s·ªë phi√™n: ${this.history.length}`);
    }

    /**
     * Ph∆∞∆°ng ph√°p 1: Ph√¢n t√≠ch m·∫´u h√¨nh chu·ªói (Sequence Pattern)
     */
    predictBySequencePattern() {
        if (this.history.length < 5) return { prediction: '?', confidence: 0 };
        
        // Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ th√†nh chu·ªói 'T' v√† 'X'
        const historyStr = this.history.map(r => r === 'T√†i' ? 'T' : 'X').join('');

        // Ki·ªÉm tra c√°c m·∫´u h√¨nh l·∫∑p l·∫°i g·∫ßn ƒë√¢y
        const recentPatterns = [
            historyStr.slice(-6, -3), // V√≠ d·ª•: 'TXX'
            historyStr.slice(-5, -2),
            historyStr.slice(-4, -1)
        ];

        let bestMatch = null;
        let highestConfidence = 0;

        for (const pattern of recentPatterns) {
            const patternToMatch = pattern;
            const nextExpected = historyStr.slice(-1);
            
            // T√¨m ki·∫øm m·∫´u h√¨nh t∆∞∆°ng t·ª± trong l·ªãch s·ª≠
            let matchCount = 0;
            for (let i = 0; i < historyStr.length - patternToMatch.length; i++) {
                if (historyStr.slice(i, i + patternToMatch.length) === patternToMatch) {
                    const nextResult = historyStr[i + patternToMatch.length];
                    if (nextResult === nextExpected) {
                        matchCount++;
                    }
                }
            }

            if (matchCount > 0) {
                const totalMatches = historyStr.split(patternToMatch).length - 1;
                const confidence = matchCount / totalMatches;
                if (confidence > highestConfidence) {
                    highestConfidence = confidence;
                    bestMatch = {
                        prediction: nextExpected === 'T' ? 'X·ªâu' : 'T√†i', // ƒê·∫£o ng∆∞·ª£c k·∫øt qu·∫£ v√¨ m·∫´u h√¨nh c√≥ th·ªÉ b·ªã ph√° v·ª°
                        confidence: 0.6 + confidence * 0.3 // TƒÉng ƒë·ªô tin c·∫≠y, v√≠ d·ª• t·ª´ 60-90%
                    };
                }
            }
        }
        
        return bestMatch || { prediction: '?', confidence: 0 };
    }

    /**
     * Ph∆∞∆°ng ph√°p 2: Ph√¢n t√≠ch x√°c su·∫•t theo s·ªë l·∫ßn xu·∫•t hi·ªán g·∫ßn ƒë√¢y
     */
    predictByRecentBias() {
        if (this.history.length < 20) return { prediction: '?', confidence: 0 };
        
        const recentHistory = this.history.slice(-100);
        const taiCount = recentHistory.filter(r => r === 'T√†i').length;
        const xiuCount = recentHistory.length - taiCount;

        const bias = Math.abs(taiCount - xiuCount);
        const total = taiCount + xiuCount;

        if (bias > total * 0.1) { // N·∫øu c√≥ s·ª± ch√™nh l·ªách l·ªõn h∆°n 10%
            const prediction = taiCount > xiuCount ? 'T√†i' : 'X·ªâu';
            const confidence = (bias / total);
            return { prediction: prediction, confidence: 0.5 + confidence * 0.4 }; // T·ª´ 50-90%
        }

        return { prediction: '?', confidence: 0 };
    }

    /**
     * Ph∆∞∆°ng ph√°p 3: D·ª± ƒëo√°n ƒë·∫£o chi·ªÅu sau chu·ªói d√†i
     */
    predictByStreakReversal() {
        if (this.history.length < 5) return { prediction: '?', confidence: 0 };

        const lastResult = this.history[this.history.length - 1];
        let streak = 0;
        for (let i = this.history.length - 1; i >= 0; i--) {
            if (this.history[i] === lastResult) {
                streak++;
            } else {
                break;
            }
        }

        if (streak >= 4) { // N·∫øu c√≥ 4 l·∫ßn li√™n ti·∫øp tr·ªü l√™n
            const prediction = lastResult === 'T√†i' ? 'X·ªâu' : 'T√†i';
            return { prediction: prediction, confidence: 0.6 + (streak - 4) * 0.05 }; // ƒê·ªô tin c·∫≠y tƒÉng theo ƒë·ªô d√†i chu·ªói
        }
        
        return { prediction: '?', confidence: 0 };
    }

    /**
     * Ph∆∞∆°ng ph√°p 4: D·ª± ƒëo√°n ng·∫´u nhi√™n th√¥ng minh (fallback)
     */
    smartRandomPredictor() {
        const last10 = this.history.slice(-10);
        const taiCount = last10.filter(r => r === 'T√†i').length;
        const xiuCount = last10.length - taiCount;
        
        const taiProb = (taiCount + 1) / (last10.length + 2); // S·ª≠ d·ª•ng Laplace smoothing
        
        const randomValue = Math.random();
        
        const prediction = randomValue < taiProb ? 'T√†i' : 'X·ªâu';
        const confidence = 0.45 + Math.random() * 0.1; // Lu√¥n gi·ªØ ·ªü m·ª©c th·∫•p
        
        return { prediction, confidence };
    }

    /**
     * K·∫øt h·ª£p t·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n cu·ªëi c√πng.
     */
    async predict() {
        const methods = [
            this.predictByStreakReversal(), // Tr·ªçng s·ªë cao
            this.predictBySequencePattern(), // Tr·ªçng s·ªë trung b√¨nh
            this.predictByRecentBias(),      // Tr·ªçng s·ªë trung b√¨nh
            this.smartRandomPredictor()      // Tr·ªçng s·ªë th·∫•p (fallback)
        ];

        let finalPrediction = { prediction: '?', confidence: 0 };
        let bestConfidence = 0;

        for (const methodResult of methods) {
            if (methodResult.confidence > bestConfidence) {
                bestConfidence = methodResult.confidence;
                finalPrediction = methodResult;
            }
        }
        
        return finalPrediction;
    }
}

// Export class MasterPredictor ƒë·ªÉ s·ª≠ d·ª•ng ·ªü server.js
module.exports = { MasterPredictor };
